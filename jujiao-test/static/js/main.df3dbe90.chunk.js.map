{"version":3,"sources":["redux/actions.js","Main.js","redux/reducers.js","redux/store.js","index.js"],"names":["todoIndex","addTodo","text","type","payload","id","completed","removeTodo","todo","toggleTodo","updateFilter","showStatus","styles","page","padding","inputLine","display","alignItems","button","margin","todoItem","width","height","lineHeight","fontSize","removeBtn","float","connect","store","todos","filter","visibleTodos","item","dispatch","compose","action","props","React","useState","todoText","state","setState","style","TextField","value","onChange","event","target","Button","variant","size","onClick","trim","map","key","Checkbox","color","checked","textDecoration","IconButton","initTodos","defaultTodoAction","initFilter","defaultFilterAction","rootReducer","combineReducers","nextState","forEach","createStore","reducers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df3dbe90.chunk.js","sourcesContent":["let todoIndex = 10;\n\nconst addTodo = (text) => {\n  todoIndex++;\n  const todo = {\n    id:todoIndex,\n    text:text,\n    completed:false\n  }\n  return {\n    type: 'todo/add',\n    payload: todo,\n  }\n};\nconst removeTodo = (todo) => ({\n  type: 'todo/remove',\n  payload: todo,\n});\nconst toggleTodo = (todo) => ({\n  type: 'todo/toggle',\n  payload: todo,\n});\n\n\nconst updateFilter = (showStatus) => ({\n  type:'filter/update',\n  payload: showStatus,\n})\n\nexport default {\n  addTodo,\n  removeTodo,\n  toggleTodo,\n  updateFilter\n};\n","import React from 'react';\nimport {compose} from \"redux\";\nimport {connect} from 'react-redux';\nimport action from './redux/actions';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst styles = {\n  page: {\n    padding: '10px'\n  },\n  inputLine: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  button: {\n    margin: '10px'\n  },\n  todoItem: {\n    width: '300px',\n    height: '50px',\n    lineHeight: '50px',\n    fontSize: '24px'\n  },\n  removeBtn: {\n    float: 'right',\n  }\n}\n\n\nfunction Main(props) {\n  const [state, setState] = React.useState({\n    todoText: ''\n  });\n  const handleChangeTodoText = event => {\n    setState({todoText: event.target.value});\n  };\n\n  const addTodo = () => {\n    const text = state.todoText.trim();\n    if (text) {\n      props.addTodo(state.todoText)\n      setState({todoText: ''});\n    }\n  }\n  return (\n    <div style={styles.page}>\n      <div style={styles.inputLine}>\n        <TextField\n          value={state.todoText}\n          onChange={handleChangeTodoText}\n          margin=\"normal\"\n        />\n        <Button variant='outlined' size=\"small\" onClick={addTodo}>\n          添加\n        </Button>\n      </div>\n\n\n      <div>\n        {props.todos.map(todo => (\n          <div key={todo.id} style={styles.todoItem}>\n            <Checkbox\n              color=\"primary\"\n              checked={todo.completed}\n              onChange={() => {\n                props.toggleTodo(todo)\n              }}\n            />\n            <span\n              style={todo.completed ? {textDecoration: 'line-through'} : {}}\n              onClick={() => {\n                props.toggleTodo(todo)\n              }}\n            >\n            {todo.text}\n            </span>\n            <span style={styles.removeBtn} onClick={() => {\n              props.removeTodo(todo)\n            }}>\n              <IconButton color=\"default\" size=\"small\">\n                <DeleteIcon/>\n              </IconButton>\n            </span>\n\n\n          </div>\n        ))}\n      </div>\n\n\n      <div>\n        <Button\n          variant={props.showStatus === '全部' ? 'contained' : 'outlined'}\n          style={styles.button}\n          onClick={() => {\n            props.updateFilter('全部')\n          }}\n        >\n          全部\n        </Button>\n        <Button\n          variant={props.showStatus === '已完成' ? 'contained' : 'outlined'}\n          style={styles.button}\n          onClick={() => {\n            props.updateFilter('已完成')\n          }}\n        >\n          已完成\n        </Button>\n        <Button\n          variant={props.showStatus === '未完成' ? 'contained' : 'outlined'}\n          style={styles.button}\n          onClick={() => {\n            props.updateFilter('未完成')\n          }}\n        >\n          未完成\n        </Button>\n      </div>\n\n    </div>\n  );\n}\n\nfunction propsMapping(store) {\n  const {todos, filter} = store;\n\n  let visibleTodos = todos;\n  if (filter.showStatus === '已完成') {\n    visibleTodos = todos.filter(item => item.completed)\n  } else if (filter.showStatus === '未完成') {\n    visibleTodos = todos.filter(item => !item.completed)\n  }\n  return {\n    todos: visibleTodos,\n    showStatus: filter.showStatus\n  };\n}\n\nfunction actionMaping(dispatch) {\n  return {\n    addTodo: compose(dispatch, action.addTodo),\n    removeTodo: compose(dispatch, action.removeTodo),\n    toggleTodo: compose(dispatch, action.toggleTodo),\n    updateFilter: compose(dispatch, action.updateFilter)\n  };\n}\n\nexport default connect(propsMapping, actionMaping)(Main);\n","import {combineReducers} from \"redux\";\n\nconst initTodos = [\n  {\n    id: 0,\n    text: 'First',\n    completed: false\n  },\n  {\n    id: 1,\n    text: 'Second',\n    completed: false\n  },\n  {\n    id: 2,\n    text: 'Third',\n    completed: false\n  },\n];\nconst defaultTodoAction = {\n  type: '',\n  payload: {},\n};\nconst todos = (state = initTodos, action = defaultTodoAction) => {\n  if (action.type === 'todo/add') {\n    return [\n      action.payload,\n      ...state\n    ]\n  } else if (action.type === 'todo/remove') {\n    return state.filter(item => item.id !== action.payload.id);\n  } else if (action.type === 'todo/toggle') {\n    let nextState = [...state];\n    nextState.forEach(item => {\n      if (item.id === action.payload.id) {\n        item.completed = !item.completed;\n      }\n    });\n    return nextState;\n  }\n  return state;\n};\n\n\n\nconst initFilter = {\n  showStatus:'全部'\n};\nconst defaultFilterAction = {\n  type:'',\n  payload: '',\n}\nconst filter = (state = initFilter, action = defaultFilterAction) => {\n  if(action.type === 'filter/update') {\n    return {\n      showStatus:action.payload\n    }\n  }\n  return state;\n}\n\n\nconst rootReducer = combineReducers({\n  todos,\n  filter\n});\n\nexport default rootReducer;\n","\nimport {createStore} from 'redux';\nimport reducers from './reducers';\n\nconst store = createStore(reducers);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport Main from './Main';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Main/>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}